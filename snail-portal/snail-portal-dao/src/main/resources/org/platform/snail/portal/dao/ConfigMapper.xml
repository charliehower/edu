<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.snail.portal.dao.ConfigMapper" >
  <resultMap id="BaseResultMap" type="org.platform.snail.portal.model.Config" >
    <id column="config_key" property="configKey" jdbcType="VARCHAR" />
    <result column="category" property="category" jdbcType="VARCHAR" />
    <result column="config_name" property="configName" jdbcType="VARCHAR" />
    <result column="config_value" property="configValue" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="BaseResultMapVo" type="org.platform.snail.portal.vo.ConfigVo"  extends="BaseResultMap" >
    <result column="CATEGORY_NAME" jdbcType="VARCHAR" property="categoryName" />
  </resultMap>
  <sql id="Base_Column_List" >
    config_key, category, config_name, config_value, remark, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from config
    where config_key = #{configKey,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from config
    where config_key = #{configKey,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="org.platform.snail.portal.model.Config" >
    insert into config (config_key, category, config_name, 
      config_value, remark, create_time
      )
    values (#{configKey,jdbcType=VARCHAR}, #{category,jdbcType=VARCHAR}, #{configName,jdbcType=VARCHAR}, 
      #{configValue,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.platform.snail.portal.model.Config" >
    insert into config
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="configKey != null" >
        config_key,
      </if>
      <if test="category != null" >
        category,
      </if>
      <if test="configName != null" >
        config_name,
      </if>
      <if test="configValue != null" >
        config_value,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="configKey != null" >
        #{configKey,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="configName != null" >
        #{configName,jdbcType=VARCHAR},
      </if>
      <if test="configValue != null" >
        #{configValue,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.platform.snail.portal.model.Config" >
    update config
    <set >
      <if test="category != null" >
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="configName != null" >
        config_name = #{configName,jdbcType=VARCHAR},
      </if>
      <if test="configValue != null" >
        config_value = #{configValue,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where config_key = #{configKey,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.platform.snail.portal.model.Config" >
    update config
    set category = #{category,jdbcType=VARCHAR},
      config_name = #{configName,jdbcType=VARCHAR},
      config_value = #{configValue,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where config_key = #{configKey,jdbcType=VARCHAR}
  </update>
  <sql id="whereCondition">
		from config
		<if test="condition.category!=null and condition.category!=&quot;&quot;">
			and category =#{condition.category,jdbcType=VARCHAR}
		</if>
		<if test="condition.configName!=null and condition.configName!=&quot;&quot;">
			and config_name like
			concat(#{condition.configName,jdbcType=VARCHAR},'%')
		</if>
	</sql>
	<select id="findCount" resultType="int">
		SELECT COUNT(*)
		<include refid="whereCondition" />
	</select>
	<select id="findList" resultMap="BaseResultMapVo">

		select
		<include refid="Base_Column_List" />
		<include refid="whereCondition" />
		<choose>
			<when test="orderBy!=null and orderBy!=&quot;&quot;">
				ORDER BY ${orderBy}
			</when>
			<otherwise>
				ORDER BY create_time
			</otherwise>
		</choose>

		limit #{start,jdbcType=DECIMAL}, #{limit,jdbcType=DECIMAL}

	</select>
	
	<select id="isExitByName" resultType="int">
		select count(*)
		from
		config where config_name=#{name}
	</select>
</mapper>