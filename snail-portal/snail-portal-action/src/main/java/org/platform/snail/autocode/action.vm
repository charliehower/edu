package org.platform.snail.portal.web.action;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.platform.snail.beans.DataResponse;
import org.platform.snail.beans.Page;
import org.platform.snail.beans.SystemUser;
import org.platform.snail.portal.model.$!{bean.name};
import org.platform.snail.portal.service.$!{bean.name}Service;
import org.platform.snail.web.action.BaseController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.platform.snail.portal.vo.$!{bean.name}QVo;
import org.platform.snail.portal.vo.$!{bean.name}Vo;
import org.springframework.web.multipart.MultipartFile;
@Controller
@RequestMapping("/$!{bean.lowerName}")
public class $!{bean.name}Action extends BaseController {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	Logger logger = Logger.getLogger(this.getClass());
	@Autowired
	private $!{bean.name}Service $!{bean.lowerName}Service;
	@RequestMapping(value = "/find$!{bean.name}List.do")
	@ResponseBody
	public  DataResponse find$!{bean.name}List($!{bean.name}QVo condition,Page page){
		try{
			DataResponse rst = this.$!{bean.lowerName}Service.find$!{bean.name}List(condition,page.getStart(), page.getLimit(), page.getOrderBy());
			if (rst.getAllRows() == null) {
				rst.setAllRows(page.getTotalRecord());
			}
			return rst;
		}catch(Exception e){
			this.logger.error(e);
			return new DataResponse(false,e.getMessage());
		}
	}
	@RequestMapping(value = "/insert$!{bean.name}.do")
	@ResponseBody
	public  DataResponse insert$!{bean.name}(String jsons){
		try{
			SystemUser systemUser =this.getSessionSystemUser();
			JSONObject json=JSONObject.fromObject(jsons);
			return this.$!{bean.lowerName}Service.insert$!{bean.name}(json, systemUser);
		}catch(Exception e){
			this.logger.error(e);
			return new DataResponse(false,"保存失败！",e.getMessage());
		}
	}
	
	@RequestMapping(value = "/update$!{bean.name}.do")
	@ResponseBody
	public  DataResponse update$!{bean.name}(String jsons){
		try{
			SystemUser systemUser =this.getSessionSystemUser();
			JSONObject json=JSONObject.fromObject(jsons);
			return this.$!{bean.lowerName}Service.update$!{bean.name}(json, systemUser);
		}catch(Exception e){
			this.logger.error(e);
			return new DataResponse(false,"更新失败！",e.getMessage());
		}
	}
	@RequestMapping(value = "/select$!{bean.name}ByPrimaryKey.do")
	@ResponseBody
	public  DataResponse select$!{bean.name}ByPrimaryKey(String id){
		try{
			return this.$!{bean.lowerName}Service.select$!{bean.name}ByPrimaryKey(id);
		}catch(Exception e){
			this.logger.error(e);
			return new DataResponse(false,"加载失败！",e.getMessage());
		}
	}
	@RequestMapping(value = "/delete$!{bean.name}By$!{bean.name}Id.do")
	@ResponseBody
	public  DataResponse delete$!{bean.name}By$!{bean.name}Id(String jsons){
		try{
			JSONObject json=JSONObject.fromObject(jsons);
			String id=json.getString("id");
			SystemUser systemUser =this.getSessionSystemUser();
			return this.$!{bean.lowerName}Service.delete$!{bean.name}By$!{bean.name}Id(id,systemUser);
		}catch(Exception e){
			this.logger.error(e);
			return new DataResponse(false,"删除失败！",e.getMessage());
		}
	}
	@RequestMapping(value = "/importXls.do")
	@ResponseBody
	public  DataResponse importXls(@RequestParam MultipartFile[] file,String jsons){
		try{
			SystemUser systemUser =this.getSessionSystemUser();
			JSONObject json=JSONObject.fromObject(jsons);
			return this.$!{bean.lowerName}Service.importXls(file, json, systemUser);
		}catch(Exception e){
			this.logger.error(e);
			return new DataResponse(false,"导入失败！",e.getMessage());
		}
	}
}
