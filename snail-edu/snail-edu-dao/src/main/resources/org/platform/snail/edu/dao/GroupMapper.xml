<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.snail.edu.dao.GroupMapper">
	<resultMap id="BaseResultMap" type="org.platform.snail.edu.model.Group">
		<id column="group_id" property="groupId" jdbcType="VARCHAR" />
		<result column="group_name" property="groupName" jdbcType="VARCHAR" />
		<result column="sql_text" property="sqlText" jdbcType="VARCHAR" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="BaseResultMapVo"
		type="org.platform.snail.edu.vo.GroupVo">

	</resultMap>
	<sql id="Base_Column_List">
		group_id, group_name, sql_text, remark, create_time
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from groups
		where group_id = #{groupId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from groups
		where group_id = #{groupId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.platform.snail.edu.model.Group">
		insert into groups (group_id, group_name, sql_text,
		remark, create_time)
		values (#{groupId,jdbcType=VARCHAR}, #{groupName,jdbcType=VARCHAR},
		#{sqlText,jdbcType=VARCHAR},
		#{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="org.platform.snail.edu.model.Group">
		insert into groups
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="groupId != null">
				group_id,
			</if>
			<if test="groupName != null">
				group_name,
			</if>
			<if test="sqlText != null">
				sql_text,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="groupId != null">
				#{groupId,jdbcType=VARCHAR},
			</if>
			<if test="groupName != null">
				#{groupName,jdbcType=VARCHAR},
			</if>
			<if test="sqlText != null">
				#{sqlText,jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.platform.snail.edu.model.Group">
		update groups
		<set>
			<if test="groupName != null">
				group_name = #{groupName,jdbcType=VARCHAR},
			</if>
			<if test="sql != null">
				sql_text = #{sqlText,jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where group_id = #{groupId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.platform.snail.edu.model.Group">
		update groups
		set group_name = #{groupName,jdbcType=VARCHAR},
		sql_text = #{sqlText,jdbcType=VARCHAR},
		remark = #{remark,jdbcType=VARCHAR},
		create_time = #{createTime,jdbcType=TIMESTAMP}
		where group_id = #{groupId,jdbcType=VARCHAR}
	</update>
	<select id="selectGroupDepTreeByPid" resultType="map">
		SELECT
		t.ID ,
		t.PID,
		t.TEXT,
		'' SRC,
		t.href HREF,
		'closed' STATE,
		'' ICON,
		(SELECT
		CAST(COUNT(*) AS CHAR)
		FROM
		(SELECT
		b.department_id id,
		b.parent_department_id pid,
		b.department_name text,
		'' herf
		FROM
		department b UNION ALL SELECT
		a.teacher_id id, a.department_id pid, a.name text,a.tel href
		FROM
		teacher a where a.stauts!='4') a
		WHERE
		a.pid = t.id) CHILD_COUNT
		FROM
		(SELECT
		b.department_id id,
		b.parent_department_id pid,
		b.department_name text,
		'' href
		FROM
		department b UNION ALL SELECT
		a.teacher_id id, a.department_id pid, a.name text,a.tel herf
		FROM
		teacher a where a.stauts!='4') t
		WHERE
		t.pid = #{pid}
	</select>
	<select id="selectGroupGradeTreeByPid" resultType="map">
		SELECT
		t.ID ,
		t.PID,
		t.TEXT,
		'' SRC,
		'closed' STATE,
		'' HREF,
		(SELECT
		CAST(COUNT(*) AS CHAR)
		FROM
		(SELECT
		b.grade_id id,
		'0' pid,
		b.grade_name text
		FROM
		grade b UNION ALL SELECT
		a.teacher_id id, a.grade_id pid, a.name text
		FROM
		teacher a) a
		WHERE
		a.pid = t.id) CHILD_COUNT
		FROM
		(SELECT
		b.grade_id id,
		'0' pid,
		b.grade_name text
		FROM
		grade b UNION ALL SELECT
		a.teacher_id id, a.grade_id pid, a.name text
		FROM
		teacher a) t
		WHERE
		t.pid = #{pid}
	</select>

	<select id="selectGroupDiscriblineTreeByPid" resultType="map">
		SELECT
		t.ID ,
		t.PID,
		t.TEXT,
		'' SRC,
		'closed' STATE,
		'' HREF,
		(SELECT
		CAST(COUNT(*) AS CHAR)
		FROM
		(SELECT
		b.discipline_id id,
		'0' pid,
		b.discipline_name text
		FROM
		discipline b UNION ALL SELECT
		a.teacher_id id, a.discipline_id pid, a.name text
		FROM
		teacher a) a
		WHERE
		a.pid = t.id) CHILD_COUNT
		FROM
		(SELECT
		b.discipline_id id,
		'0' pid,
		b.discipline_name text
		FROM
		discipline b UNION ALL SELECT
		a.teacher_id id, a.discipline_id pid, a.name text
		FROM
		teacher a) t
		WHERE
		t.pid = #{pid}
	</select>
	<select id="isExitByName" resultType="int">
		select count(*) from groups where group_name=#{name}
	</select>
	<sql id="whereCondition">

		from groups where 0=0


		<if test="condition.groupName!=null and condition.groupName!=&quot;&quot;">

			and
			group_name like
			concat(#{condition.groupName,jdbcType=VARCHAR},'%')
		</if>

	</sql>

	<select id="findCount" resultType="int">

		SELECT COUNT(*)

		<include refid="whereCondition" />

	</select>

	<select id="findList" resultMap="BaseResultMapVo">
		select
		<include refid="Base_Column_List" />

		<include refid="whereCondition" />

		<choose>

			<when test="orderBy!=null and orderBy!=&quot;&quot;">

				ORDER BY ${orderBy}

			</when>

			<otherwise>

				ORDER BY group_id

			</otherwise>

		</choose>
		limit #{start,jdbcType=DECIMAL}, #{limit,jdbcType=DECIMAL}
	</select>
	<select id="selectFreeGroupTreeRoot" resultType="map">
		SELECT
		a.group_id ID,
		'0' PID,
		a.group_name TEXT,
		'' SRC,
		'closed' STATE,
		'' HREF,
		'1' CHILD_COUNT
		FROM
		groups a
	</select>

	<select id="selectFreeGroupUsersListByGorupId" resultType="map">
		SELECT
		users.USER_ID,users.NAME
		FROM
		groups_sub
		LEFT JOIN
		users ON groups_sub.user_id = users.user_id
		WHERE
		group_id = #{groupId} and users.stauts='1'
	</select>
	<update id="batchSaveGroupUsersByUserIds">
		delete from groups_sub where group_id = #{groupId};
		<foreach item="userId" index="index" collection="list" open=""
			separator="" close="">
			insert into groups_sub
			(group_id,user_id,create_time) values (#{groupId},#{userId},now());
		</foreach>
	</update>
	<select id="selectFreeGroupUsersTreeByGorupId"  resultType="map">
		SELECT 
    a.teacher_id ID,
    '03' PID,
    a.name TEXT,
    '' SRC,
    'closed' STATE,
    a.tel HREF,
     '0' CHILD_COUNT
FROM
    teacher a where a.teacher_id in(select user_id from groups_sub where group_id=#{groupId})
	</select>
</mapper>