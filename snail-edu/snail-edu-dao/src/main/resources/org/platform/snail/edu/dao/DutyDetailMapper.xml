<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.snail.edu.dao.DutyDetailMapper">
	<resultMap id="BaseResultMap" type="org.platform.snail.edu.model.DutyDetail">
		<id column="duty_detail_id" property="dutyDetailId" jdbcType="INTEGER" />
		<result column="duty_id" property="dutyId" jdbcType="VARCHAR" />
		<result column="teacher_id" property="teacherId" jdbcType="VARCHAR" />
		<result column="tel" property="tel" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="category" property="category" jdbcType="CHAR" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="BaseResultMapVo"
		type="org.platform.snail.edu.vo.DutyDetailVo">
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="duty_start" property="dutyStart" jdbcType="DATE" />
		<result column="duty_end" property="dutyEnd" jdbcType="DATE" />
	</resultMap>
	<sql id="Base_Column_List">
		duty_detail_id, duty_id, teacher_id, tel, create_time, category
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from duty_detail
		where duty_detail_id = #{dutyDetailId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from duty_detail
		where duty_detail_id = #{dutyDetailId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="org.platform.snail.edu.model.DutyDetail">
		insert into duty_detail (duty_detail_id, duty_id, teacher_id,
		tel, create_time, category
		)
		values (#{dutyDetailId,jdbcType=INTEGER}, #{dutyId,jdbcType=VARCHAR},
		#{teacherId,jdbcType=VARCHAR},
		#{tel,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{category,jdbcType=CHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.platform.snail.edu.model.DutyDetail">
		insert into duty_detail
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="dutyDetailId != null">
				duty_detail_id,
			</if>
			<if test="dutyId != null">
				duty_id,
			</if>
			<if test="teacherId != null">
				teacher_id,
			</if>
			<if test="tel != null">
				tel,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="category != null">
				category,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="dutyDetailId != null">
				#{dutyDetailId,jdbcType=INTEGER},
			</if>
			<if test="dutyId != null">
				#{dutyId,jdbcType=VARCHAR},
			</if>
			<if test="teacherId != null">
				#{teacherId,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				#{tel,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="category != null">
				#{category,jdbcType=CHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.platform.snail.edu.model.DutyDetail">
		update duty_detail
		<set>
			<if test="dutyId != null">
				duty_id = #{dutyId,jdbcType=VARCHAR},
			</if>
			<if test="teacherId != null">
				teacher_id = #{teacherId,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				tel = #{tel,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="category != null">
				category = #{category,jdbcType=CHAR},
			</if>
		</set>
		where duty_detail_id = #{dutyDetailId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.platform.snail.edu.model.DutyDetail">
		update duty_detail
		set duty_id = #{dutyId,jdbcType=VARCHAR},
		teacher_id = #{teacherId,jdbcType=VARCHAR},
		tel = #{tel,jdbcType=VARCHAR},
		create_time = #{createTime,jdbcType=TIMESTAMP},
		category = #{category,jdbcType=CHAR}
		where duty_detail_id = #{dutyDetailId,jdbcType=INTEGER}
	</update>
	
	<sql id="whereCondition">

		from duty_detail a left join duty b on a.duty_id=b.duty_id
		left join teacher c on a.teacher_id=c.teacher_id where 0=0
		
		<if test="condition.dateTime!=null and condition.dateTime!=&quot;&quot;">
		 <![CDATA[
					and b.duty_start >=str_to_date(#{condition.dateTime},'%Y-%m-%d %H:%i:%S')  
					and b.duty_end <=str_to_date(#{condition.dateTime},'%Y-%m-%d %H:%i:%S')  
		]]>
		</if>
	</sql>

	<select id="findCount" resultType="int">

		SELECT COUNT(*)

		<include refid="whereCondition" />

	</select>

	<select id="findList" resultMap="BaseResultMapVo">
		select
		a.duty_detail_id, a.duty_id, a.teacher_id, a.tel, a.create_time, a.category,
		b.duty_start,b.duty_end,c.name

		<include refid="whereCondition" />

		<choose>

			<when test="orderBy!=null and orderBy!=&quot;&quot;">

				ORDER BY ${orderBy}

			</when>

			<otherwise>

				ORDER BY duty_start desc

			</otherwise>

		</choose>
		limit #{start,jdbcType=DECIMAL}, #{limit,jdbcType=DECIMAL}
	</select>
	<select id="selectVoByPrimaryKey" resultMap="BaseResultMapVo">
		select
		a.duty_detail_id, a.duty_id, a.teacher_id, a.tel, a.create_time, a.category,
		b.duty_start,b.duty_end,c.name
from duty_detail a left join duty b on a.duty_id=b.duty_id
		left join teacher c on a.teacher_id=c.teacher_id where a.duty_detail_id=#{dutyDetailId}

		
	</select>
</mapper>