<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.snail.edu.dao.WorkPerformanceMapper" >
  <resultMap id="BaseResultMap" type="org.platform.snail.edu.model.WorkPerformance" >
    <id column="work_performance_id" property="workPerformanceId" jdbcType="INTEGER" />
    <result column="teacher_id" property="teacherId" jdbcType="VARCHAR" />
    <result column="classes" property="classes" jdbcType="VARCHAR" />
    <result column="duty" property="duty" jdbcType="VARCHAR" />
    <result column="record" property="record" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="org.platform.snail.edu.model.WorkPerformance" extends="BaseResultMap" >
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    work_performance_id, teacher_id, classes, duty, record, create_time
  </sql>
  <sql id="Blob_Column_List" >
    description
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_performance
    where work_performance_id = #{workPerformanceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from work_performance
    where work_performance_id = #{workPerformanceId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.platform.snail.edu.model.WorkPerformance" >
    insert into work_performance (work_performance_id, teacher_id, classes, 
      duty, record, create_time, 
      description)
    values (#{workPerformanceId,jdbcType=INTEGER}, #{teacherId,jdbcType=VARCHAR}, #{classes,jdbcType=VARCHAR}, 
      #{duty,jdbcType=VARCHAR}, #{record,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{description,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.platform.snail.edu.model.WorkPerformance" >
    insert into work_performance
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="workPerformanceId != null" >
        work_performance_id,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="classes != null" >
        classes,
      </if>
      <if test="duty != null" >
        duty,
      </if>
      <if test="record != null" >
        record,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="workPerformanceId != null" >
        #{workPerformanceId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="classes != null" >
        #{classes,jdbcType=VARCHAR},
      </if>
      <if test="duty != null" >
        #{duty,jdbcType=VARCHAR},
      </if>
      <if test="record != null" >
        #{record,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.platform.snail.edu.model.WorkPerformance" >
    update work_performance
    <set >
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="classes != null" >
        classes = #{classes,jdbcType=VARCHAR},
      </if>
      <if test="duty != null" >
        duty = #{duty,jdbcType=VARCHAR},
      </if>
      <if test="record != null" >
        record = #{record,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where work_performance_id = #{workPerformanceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.platform.snail.edu.model.WorkPerformance" >
    update work_performance
    set teacher_id = #{teacherId,jdbcType=VARCHAR},
      classes = #{classes,jdbcType=VARCHAR},
      duty = #{duty,jdbcType=VARCHAR},
      record = #{record,jdbcType=VARCHAR},
    
      description = #{description,jdbcType=LONGVARCHAR}
    where work_performance_id = #{workPerformanceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.platform.snail.edu.model.WorkPerformance" >
    update work_performance
    set teacher_id = #{teacherId,jdbcType=VARCHAR},
      classes = #{classes,jdbcType=VARCHAR},
      duty = #{duty,jdbcType=VARCHAR},
      record = #{record,jdbcType=VARCHAR}
    where work_performance_id = #{workPerformanceId,jdbcType=INTEGER}
  </update>
  <select id="findWorkPerformanceListByTeacherId" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_performance
    where teacher_id = #{teacherId,jdbcType=VARCHAR} order by create_time
  </select>
</mapper>