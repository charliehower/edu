<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.snail.edu.dao.WorkExperienceMapper" >
  <resultMap id="BaseResultMap" type="org.platform.snail.edu.model.WorkExperience" >
    <id column="work_experience_id" property="workExperienceId" jdbcType="INTEGER" />
    <result column="teacher_id" property="teacherId" jdbcType="VARCHAR" />
    <result column="date_start" property="dateStart" jdbcType="DATE" />
    <result column="date_end" property="dateEnd" jdbcType="DATE" />
    <result column="work_unit" property="workUnit" jdbcType="VARCHAR" />
    <result column="position" property="position" jdbcType="VARCHAR" />
    <result column="reterence" property="reterence" jdbcType="VARCHAR" />
     <result column="performance" property="performance" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="org.platform.snail.edu.model.WorkExperience" extends="BaseResultMap" >
    <result column="performance" property="performance" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    work_experience_id, teacher_id, date_start, date_end, work_unit, position, reterence, 
    create_time
  </sql>
  <sql id="Blob_Column_List" >
    performance
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_experience
    where work_experience_id = #{workExperienceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from work_experience
    where work_experience_id = #{workExperienceId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.platform.snail.edu.model.WorkExperience" >
    insert into work_experience (work_experience_id, teacher_id, date_start, 
      date_end, work_unit, position, 
      reterence, create_time, performance
      )
    values (#{workExperienceId,jdbcType=INTEGER}, #{teacherId,jdbcType=VARCHAR}, #{dateStart,jdbcType=DATE}, 
      #{dateEnd,jdbcType=DATE}, #{workUnit,jdbcType=VARCHAR}, #{position,jdbcType=VARCHAR}, 
      #{reterence,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{performance,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.platform.snail.edu.model.WorkExperience" >
    insert into work_experience
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="workExperienceId != null" >
        work_experience_id,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="dateStart != null" >
        date_start,
      </if>
      <if test="dateEnd != null" >
        date_end,
      </if>
      <if test="workUnit != null" >
        work_unit,
      </if>
      <if test="position != null" >
        position,
      </if>
      <if test="reterence != null" >
        reterence,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="performance != null" >
        performance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="workExperienceId != null" >
        #{workExperienceId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="dateStart != null" >
        #{dateStart,jdbcType=DATE},
      </if>
      <if test="dateEnd != null" >
        #{dateEnd,jdbcType=DATE},
      </if>
      <if test="workUnit != null" >
        #{workUnit,jdbcType=VARCHAR},
      </if>
      <if test="position != null" >
        #{position,jdbcType=VARCHAR},
      </if>
      <if test="reterence != null" >
        #{reterence,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="performance != null" >
        #{performance,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.platform.snail.edu.model.WorkExperience" >
    update work_experience
    <set >
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="dateStart != null" >
        date_start = #{dateStart,jdbcType=DATE},
      </if>
      <if test="dateEnd != null" >
        date_end = #{dateEnd,jdbcType=DATE},
      </if>
      <if test="workUnit != null" >
        work_unit = #{workUnit,jdbcType=VARCHAR},
      </if>
      <if test="position != null" >
        position = #{position,jdbcType=VARCHAR},
      </if>
      <if test="reterence != null" >
        reterence = #{reterence,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="performance != null" >
        performance = #{performance,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where work_experience_id = #{workExperienceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.platform.snail.edu.model.WorkExperience" >
    update work_experience
    set teacher_id = #{teacherId,jdbcType=VARCHAR},
      date_start = #{dateStart,jdbcType=DATE},
      date_end = #{dateEnd,jdbcType=DATE},
      work_unit = #{workUnit,jdbcType=VARCHAR},
      position = #{position,jdbcType=VARCHAR},
      reterence = #{reterence,jdbcType=VARCHAR},
      
      performance = #{performance,jdbcType=LONGVARCHAR}
    where work_experience_id = #{workExperienceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.platform.snail.edu.model.WorkExperience" >
    update work_experience
    set teacher_id = #{teacherId,jdbcType=VARCHAR},
      date_start = #{dateStart,jdbcType=DATE},
      date_end = #{dateEnd,jdbcType=DATE},
      work_unit = #{workUnit,jdbcType=VARCHAR},
      position = #{position,jdbcType=VARCHAR},
      reterence = #{reterence,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where work_experience_id = #{workExperienceId,jdbcType=INTEGER}
  </update>
  <select id="findWorkExperienceListByTeacherId" resultMap="ResultMapWithBLOBs">
   select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_experience
    where teacher_id = #{teacherId,jdbcType=VARCHAR}
  </select>
</mapper>