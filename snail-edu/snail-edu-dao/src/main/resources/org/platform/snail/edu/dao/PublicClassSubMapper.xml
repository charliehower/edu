<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.platform.snail.edu.dao.PublicClassSubMapper">
	<resultMap id="BaseResultMap" type="org.platform.snail.edu.model.PublicClassSub">
		<id column="public_class_sub_id" property="publicClassSubId"
			jdbcType="VARCHAR" />
		<result column="public_class_id" property="publicClassId"
			jdbcType="VARCHAR" />
		<result column="teacher_id" property="teacherId" jdbcType="VARCHAR" />
		<result column="reg_time" property="regTime" jdbcType="TIMESTAMP" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="score" property="score" jdbcType="DECIMAL" />
		<result column="score_time" property="scoreTime" jdbcType="TIMESTAMP" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Base_Column_List">
		public_class_sub_id, public_class_id, teacher_id, reg_time,
		remark, score, score_time,
		create_time
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from public_class_sub
		where public_class_sub_id =
		#{publicClassSubId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		public_class_sub
		where public_class_sub_id =
		#{publicClassSubId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.platform.snail.edu.model.PublicClassSub">
		insert into public_class_sub
		(public_class_sub_id, public_class_id,
		teacher_id, reg_time, remark,
		score, score_time, create_time
		)
		values
		(#{publicClassSubId,jdbcType=VARCHAR},
		#{publicClassId,jdbcType=VARCHAR},
		#{teacherId,jdbcType=VARCHAR},
		#{regTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR},
		#{score,jdbcType=DECIMAL}, #{scoreTime,jdbcType=TIMESTAMP},
		#{createTime,jdbcType=TIMESTAMP}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.platform.snail.edu.model.PublicClassSub">
		insert into public_class_sub
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="publicClassSubId != null">
				public_class_sub_id,
			</if>
			<if test="publicClassId != null">
				public_class_id,
			</if>
			<if test="teacherId != null">
				teacher_id,
			</if>
			<if test="regTime != null">
				reg_time,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="score != null">
				score,
			</if>
			<if test="scoreTime != null">
				score_time,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="publicClassSubId != null">
				#{publicClassSubId,jdbcType=VARCHAR},
			</if>
			<if test="publicClassId != null">
				#{publicClassId,jdbcType=VARCHAR},
			</if>
			<if test="teacherId != null">
				#{teacherId,jdbcType=VARCHAR},
			</if>
			<if test="regTime != null">
				#{regTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="score != null">
				#{score,jdbcType=DECIMAL},
			</if>
			<if test="scoreTime != null">
				#{scoreTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.platform.snail.edu.model.PublicClassSub">
		update public_class_sub
		<set>
			<if test="publicClassId != null">
				public_class_id = #{publicClassId,jdbcType=VARCHAR},
			</if>
			<if test="teacherId != null">
				teacher_id = #{teacherId,jdbcType=VARCHAR},
			</if>
			<if test="regTime != null">
				reg_time = #{regTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="score != null">
				score = #{score,jdbcType=DECIMAL},
			</if>
			<if test="scoreTime != null">
				score_time = #{scoreTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where public_class_sub_id = #{publicClassSubId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.platform.snail.edu.model.PublicClassSub">
		update
		public_class_sub
		set public_class_id =
		#{publicClassId,jdbcType=VARCHAR},
		teacher_id =
		#{teacherId,jdbcType=VARCHAR},
		reg_time =
		#{regTime,jdbcType=TIMESTAMP},
		remark = #{remark,jdbcType=VARCHAR},
		score = #{score,jdbcType=DECIMAL},
		score_time =
		#{scoreTime,jdbcType=TIMESTAMP},
		create_time =
		#{createTime,jdbcType=TIMESTAMP}
		where public_class_sub_id =
		#{publicClassSubId,jdbcType=VARCHAR}
	</update>
	<select id="selectListByid" resultType="map">
		select
		t.public_class_sub_id, t.public_class_id, t.teacher_id, t.reg_time,
		ifnull(t.remark,'æ— '), t.score, t.score_time,
		t.create_time ,users.name from
		public_class_sub t left join users on t.teacher_id=users.user_id where
		t.public_class_id=#{id}
	</select>
	<select id="isReg" resultType="int">
	select count(1) from public_class_sub where teacher_id=#{teacherId}
	</select>
</mapper>